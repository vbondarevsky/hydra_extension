#Область ПрограммныйИнтерфейс

#Область Metadata

Функция GetMeta(Запрос)
	
	Мета = Новый Структура;
	Мета.Вставить("name", Метаданные.Имя);
	Мета.Вставить("version", Метаданные.Версия);
	Мета.Вставить("hydra_version", ВерсияРасширения());
	
	Возврат ПодготовитьОтвет(Мета);

КонецФункции

#КонецОбласти

#Область UserManager

Функция GetUser(Запрос)
	
	СписокПользователей = Новый Массив;
	
	Выборка = Справочники.Пользователи.Выбрать();
	Пока Выборка.Следующий() Цикл
		Пользователь = Новый Структура;
		Пользователь.Вставить("name", Выборка.Наименование);
		Пользователь.Вставить("id", XMLСтрока(Выборка.ИдентификаторПользователяИБ));
		Пользователь.Вставить("active", Не Выборка.Недействителен);
		СписокПользователей.Добавить(Пользователь);
	КонецЦикла;
	
	Возврат ПодготовитьОтвет(СписокПользователей);
	
КонецФункции

Функция CreateUser(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция EditUser(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

Функция RemoveUser(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

#КонецОбласти

#Область PasswordPolicy

Функция GetPasswordPolicy(Запрос)
		
	ПарольнаяПолитика = Новый Структура;
	Если ИспользоватьРасширенныеПарольнуюПолитику() Тогда
		МодульПользователиСлужебный = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебный");
		НастройкиВхода = МодульПользователиСлужебный.НастройкиВхода();

		ПарольнаяПолитика.Вставить("strong_passwords", НастройкиВхода.Пользователи.ПарольДолженОтвечатьТребованиямСложности);
		ПарольнаяПолитика.Вставить("minimum_length", НастройкиВхода.Пользователи.МинимальнаяДлинаПароля);
		ПарольнаяПолитика.Вставить("minimum_age", НастройкиВхода.Пользователи.МинимальныйСрокДействияПароля);
		ПарольнаяПолитика.Вставить("maximum_age", НастройкиВхода.Пользователи.МаксимальныйСрокДействияПароля);
		ПарольнаяПолитика.Вставить("inactive_period", НастройкиВхода.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода);
		ПарольнаяПолитика.Вставить("password_history", НастройкиВхода.Пользователи.ЗапретитьПовторениеПароляСредиПоследних);	
	Иначе
		ПарольнаяПолитика.Вставить("strong_passwords", ПолучитьПроверкуСложностиПаролейПользователей());
		ПарольнаяПолитика.Вставить("minimum_length", ПолучитьМинимальнуюДлинуПаролейПользователей());
	КонецЕсли;
	
	Возврат ПодготовитьОтвет(ПарольнаяПолитика);

КонецФункции

Функция SetPasswordPolicy(Запрос)
	
	УстановитьНастройкиВхода(ИзвлечьПараметрыИзЗапроса(Запрос));
	
	Возврат GetPasswordPolicy(Запрос);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИзвлечьПараметрыИзЗапроса(Запрос)
	
	Возврат JsonВОбъект(Запрос.ПолучитьТелоКакПоток());	
	
КонецФункции

Функция УстановитьНастройкиВхода(password_policy)
	
	ПросрочкаРаботыВПрограммеДоЗапрещенияВхода = Неопределено;
	ПарольДолженОтвечатьТребованиямСложности = password_policy.strong_passwords;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки  = Блокировка.Добавить("Константа.НастройкиВходаПользователей");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		НастройкиВхода = ПользователиСлужебный.НастройкиВхода();
		Настройки = НастройкиВхода.Пользователи;
		Настройки.ПарольДолженОтвечатьТребованиямСложности = ПарольДолженОтвечатьТребованиямСложности;
		
		Если Не ЗначениеЗаполнено(ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
			Настройки.ПросрочкаРаботыВПрограммеДатаВключения = '00010101';
			
		ИначеЕсли Не ЗначениеЗаполнено(Настройки.ПросрочкаРаботыВПрограммеДатаВключения) Тогда
			Настройки.ПросрочкаРаботыВПрограммеДатаВключения = НачалоДня(ТекущаяДатаСеанса());
		КонецЕсли;
		
		ПредлагаемыеЗначенияНастроек = Новый Структура;
		
		ПредлагаемыеЗначенияНастроек.Вставить("МинимальнаяДлинаПароля", password_policy.minimum_length);
		ПредлагаемыеЗначенияНастроек.Вставить("МинимальныйСрокДействияПароля", password_policy.minimum_age);
		ПредлагаемыеЗначенияНастроек.Вставить("МаксимальныйСрокДействияПароля", password_policy.maximum_age);
		ПредлагаемыеЗначенияНастроек.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", password_policy.inactive_period);
		ПредлагаемыеЗначенияНастроек.Вставить("ЗапретитьПовторениеПароляСредиПоследних", password_policy.password_history);	

		Для Каждого КлючИЗначение Из ПредлагаемыеЗначенияНастроек Цикл
			Настройки[КлючИЗначение.Ключ] = ПредлагаемыеЗначенияНастроек[КлючИЗначение.Ключ];
		КонецЦикла;
		
		Константы.НастройкиВходаПользователей.Установить(Новый ХранилищеЗначения(НастройкиВхода));
		
		Если ЗначениеЗаполнено(НастройкиВхода.Пользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода)
		 Или ЗначениеЗаполнено(НастройкиВхода.ВнешниеПользователи.ПросрочкаРаботыВПрограммеДоЗапрещенияВхода) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			ПользователиСлужебный.ИзменитьЗаданиеКонтрольАктивностиПользователей(Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецФункции

Функция ИспользоватьРасширенныеПарольнуюПолитику()
	
	Возврат Метаданные.Константы.Найти("НастройкиВходаПользователей") <> Неопределено;
	
КонецФункции

Функция ПодготовитьОтвет(Объект)
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	
	Ответ.УстановитьТелоИзСтроки(ОбъектВJson(Объект));
	
	Возврат Ответ;
	
КонецФункции

Функция JsonВОбъект(Json, Кодировка = "utf-8", ПрочитатьВСоответствие = Истина)
	
	Ридер = Новый ЧтениеJSON;
	Ридер.ОткрытьПоток(Json, Кодировка);
	Объект = ПрочитатьJSON(Ридер, ПрочитатьВСоответствие);
	Ридер.Закрыть();
	
	Возврат Объект;

КонецФункции

Функция ОбъектВJson(Объект, ПараметрыПреобразования = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(, "   "));
	ЗаписатьJSON(ЗаписьJSON, Объект,,,, ПараметрыПреобразования);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

Функция ВерсияРасширения()
	
	Расширение = РасширенияКонфигурации.Получить(Новый Структура("Имя", "HYDRA"))[0];
	
	Возврат Расширение.Версия;
	
КонецФункции

#КонецОбласти